services:
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./migrations:/migrations:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 5s
      timeout: 3s
      retries: 10

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--appendonly", "yes"]
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data

  adminer:
    image: adminer:4
    restart: always
    ports:
      - "8081:8080"
    depends_on:
      - postgres

  api:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    ports:
      - "8080:${APP_PORT}"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    entrypoint: ["/api"]
  worker:
    build:
      context: .
      target: runtime
    image: wallet-watcher:latest
    command: ["/app/worker"]
    env_file:
      - .env
    environment:
      - POLL_INTERVAL_SEC=5
      - BATCH_SIZE=10
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  pgdata:
  redisdata:

